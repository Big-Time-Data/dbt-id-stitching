Drop table if exists rudderstack.cte_cols; 
Drop table if exists rudderstack.cte_sql; 


Select table_catalog || '.' || table_schema || '.' || table_name as tn, column_name as cn
into  rudderstack.cte_cols
from SVV_COLUMNS -- Redshift
where UPPER(COLUMN_NAME) IN ('ANONYMOUS_ID', 'USER_ID', 'EMAIL', 'CONTEXT_TRAITS_EMAIL')
  	 AND UPPER(table_schema) = 'RUDDERSTACK'
     AND UPPER(TABLE_NAME) IN ('PAGES', 'IDENTIFIES', 'TRACKS', 'CHECKOUT_UPDATED');


-- Select * from cte_cols

-- Step 2
-- Collect all of our potential ID's from any (streaming for now) table where those values are present
Drop table if exists rudderstack.cte_sql; 
select listagg(sql_to_run, ' UNION ') as sql_to_run
  into rudderstack.cte_sql
  from (
      Select 'Select distinct lower(' || a.cn || '::text) as edge_a, lower(''' || a.cn  || ''') as edge_a_label, lower(' || b.cn || '::text) as edge_b, lower(''' || b.cn  || ''') as edge_b_label from ' ||  a.tn || ' where coalesce(' || a.cn ||  '::text, '''') <> '''' and coalesce(' || b.cn ||  '::text, '''') <> ''''' as sql_to_run
      from rudderstack.cte_cols a inner join rudderstack.cte_cols b 
      on a.tn = b.tn and a.cn > b.cn 
    );	


--- Step 2A:  Cleaned this up so now you can just get the results
-- select sql_to_run from cte_sql limit 1


-- Step 3
--- Copy all results into single table
--- This is a manual step but could be done in JINJA or python
drop   table if exists rudderstack.temp_id;
Select DISTINCT row_number()  over (order by 1 desc) as rudder_id, row_number()  over (order by 1 desc) as original_rudder_id, edge_a, edge_a_label, edge_b, edge_b_label
into table rudderstack.temp_id
From 
    (-- All the SQL Results from previous step dumped into an edges table  --> remove the union from the first one
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(email) as edge_b, lower('email') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(user_id, '') <> '' and coalesce(email, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(user_id, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(context_traits_email) as edge_b, lower('context_traits_email') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(user_id, '') <> '' and coalesce(context_traits_email, '') <> '' 
      
      UNION 
      
      Select 
      
      distinct lower(context_traits_email) as edge_a, lower('context_traits_email') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(context_traits_email, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.pages 
      where coalesce(user_id, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(email) as edge_a, lower('email') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.checkout_updated 
      where coalesce(email, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.checkout_updated 
      where coalesce(user_id, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(email) as edge_b, lower('email') as edge_b_label 
      from warehouse.rudderstack.checkout_updated 
      where coalesce(user_id, '') <> '' and coalesce(email, '') <> '' 
      
      UNION 
      
      Select distinct lower(email) as edge_a, lower('email') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(email, '') <> '' and coalesce(anonymous_id, '') <> '' 
      
      UNION 
      
      Select distinct lower(email) as edge_a, lower('email') as edge_a_label, lower(context_traits_email) as edge_b, lower('context_traits_email') as edge_b_label 
      from warehouse.rudderstack.identifies 
      where coalesce(email, '') <> '' and coalesce(context_traits_email, '') <> '' 
      
      UNION 
      
      Select distinct lower(context_traits_email) as edge_a, lower('context_traits_email') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.tracks 
      where coalesce(context_traits_email, '') <> '' and coalesce(anonymous_id, '') <> ''
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(context_traits_email) as edge_b, lower('context_traits_email') as edge_b_label 
      from warehouse.rudderstack.tracks 
      where coalesce(user_id, '') <> '' and coalesce(context_traits_email, '') <> '' 
      
      UNION 
      
      Select distinct lower(user_id) as edge_a, lower('user_id') as edge_a_label, lower(anonymous_id) as edge_b, lower('anonymous_id') as edge_b_label 
      from warehouse.rudderstack.tracks 
      where coalesce(user_id, '') <> '' and coalesce(anonymous_id, '') <> ''
    ) s;



-- Step 4
-- clean up weird things
/*
Select edge_a, count(*)
from rudder.temp_id
Group by 1
order by 2 desc
limit 3
*/

--- Results:  We should delete the top 2
-- Delete from temp_id where edge_a IN ('', '')

--- Now check the B Side
/*
Select edge_b, listagg(DISTINCT edge_b_label, ',') as edge_labels, count(*)
from temp_id
Group by 1
order by 3 desc
limit 3

Delete from temp_id where edge_b IN ('2d65feb1-b0cd-42a8-b790-48d3236b8a76')
*/


-- Step 5:
--- Now loop back through the two column table to find different edges for the same edge and find the first row_id
UPDATE rudderstack.temp_id
    set rudder_id = f.first_row_id
from 
    (    select edge_a, min(rudder_id) as first_row_id
          From rudderstack.temp_id
          group by 1
          having count(distinct rudder_id) > 1
    ) f
where temp_id.edge_a = f.edge_a;


-- Step 6
--- Now consolidate B Edges 
UPDATE rudderstack.temp_id
    set rudder_id = f.first_row_id
from 
    (    select edge_b, min(rudder_id) as first_row_id
          From rudderstack.temp_id
          group by 1
          having count(distinct rudder_id) > 1
    ) f
where temp_id.edge_b = f.edge_b;


/*
-- Step 7 (PREVIEW ONLY) See if there are cross edges to join now 
-- In the DBT We will want to run this to see if steps 
Select count(*) -- Until this reaches zero, keep running steps 7A and 7B
from rudder.temp_id,  
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudder.temp_id a
                inner join rudder.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where (temp_id.edge_a = ea.edge or temp_id.edge_b = ea.edge) and temp_id.rudder_id <> ea.first_rudder_id
*/

--- Step 7A (REPEAT) Update those edges that match column edge A
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_a = ea.edge -- or temp_id.edge_b = ea.edge)-- 
	and temp_id.rudder_id <> ea.first_rudder_id;

--- REDSHIFT WILL NOT ALLOW THE OR JOIN IN UPDATES (equijoin issues with updating in redshift so repeat these steps)
-- Step 7B
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_b = ea.edge 
	and temp_id.rudder_id <> ea.first_rudder_id;

-- Repeat step 7 - 2'nd Pass
--- Update those edges that match column edge A
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_a = ea.edge -- or temp_id.edge_b = ea.edge)-- 
	and temp_id.rudder_id <> ea.first_rudder_id;

-- Step 7B - Second Pass
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_b = ea.edge 
	and temp_id.rudder_id <> ea.first_rudder_id;

-- Repeat step 7 - Third Pass
--- Update those edges that match column edge A
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_a = ea.edge -- or temp_id.edge_b = ea.edge)-- 
	and temp_id.rudder_id <> ea.first_rudder_id;

-- Step 7B - Third Pass
update rudderstack.temp_id set rudder_id = ea.first_rudder_id
From
         (
            Select distinct case when a.rudder_id < b.rudder_id then a.rudder_id else b.rudder_id end as first_rudder_id , a.edge_a as edge
            From rudderstack.temp_id a
                inner join rudderstack.temp_id b on a.edge_a = b.edge_b
            where a.rudder_id <> b.rudder_id
            ) ea 
where temp_id.edge_b = ea.edge 
	and temp_id.rudder_id <> ea.first_rudder_id;


-- Step 8:  Join these back into a single graph
Drop TABLE IF EXISTS rudderstack.rs_user_id_graph;
Select distinct *
into rudderstack.rs_user_id_graph
From 
    (
      Select rudder_id, edge_a as edge, edge_a_label as edge_label
      From rudderstack.temp_id

      UNION

      Select rudder_id, edge_b as edge, edge_b_label as edge_label
      From rudderstack.temp_id
    ) c
Order by rudder_id;



